// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "http server",
    "title": "http server API",
    "version": "v1"
  },
  "basePath": "/v1",
  "paths": {
    "/endpoint/{id}": {
      "get": {
        "description": "Returns endpoint information implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Get endpoint by endpoint ID",
        "parameters": [
          {
            "$ref": "#/parameters/endpoint-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EndpointStatus"
            }
          },
          "400": {
            "description": "Invalid endpoint ID format for specified type",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          }
        }
      },
      "put": {
        "description": "Creates a new endpoint implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Create endpoint",
        "parameters": [
          {
            "$ref": "#/parameters/endpoint-id"
          },
          {
            "$ref": "#/parameters/endpoint-change-request"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid endpoint in request",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "409": {
            "description": "Endpoint already exists",
            "x-go-name": "Exists"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          },
          "500": {
            "description": "Endpoint creation failed",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Failed"
          }
        }
      },
      "delete": {
        "description": "Deletes the endpoint specified by the ID implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Delete endpoint",
        "parameters": [
          {
            "$ref": "#/parameters/endpoint-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "206": {
            "description": "Deleted with a number of errors encountered",
            "schema": {
              "type": "integer"
            },
            "x-go-name": "Errors"
          },
          "400": {
            "description": "Invalid endpoint ID format for specified type. Details in error\nmessage\n",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          }
        }
      },
      "patch": {
        "description": "Applies the endpoint change request to an existing endpoint implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Modify existing endpoint",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/parameters/endpoint-id"
          },
          {
            "$ref": "#/parameters/endpoint-change-request"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid modify endpoint request",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "Endpoint does not exist"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          },
          "500": {
            "description": "Endpoint update failed",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Failed"
          }
        }
      }
    },
    "/healthy/liveness": {
      "get": {
        "description": "pod liveness probe for agent and controller pod",
        "tags": [
          "healthy"
        ],
        "summary": "Liveness probe",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Failed"
          }
        }
      }
    },
    "/healthy/readiness": {
      "get": {
        "description": "pod readiness probe for agent and controller pod",
        "tags": [
          "healthy"
        ],
        "summary": "Readiness probe",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Failed"
          }
        }
      }
    },
    "/healthy/startup": {
      "get": {
        "description": "pod startup probe for agent and controller pod",
        "tags": [
          "healthy"
        ],
        "summary": "Startup probe",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Failed"
          }
        }
      }
    }
  },
  "definitions": {
    "EndpointChangeRequest": {
      "description": "Structure which contains the mutable elements of an Endpoint.\n",
      "type": "object",
      "required": [
        "id",
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "enabled",
          "type": "boolean"
        },
        "id": {
          "description": "Local endpoint ID",
          "type": "integer"
        }
      }
    },
    "EndpointStatus": {
      "description": "An endpoint is a namespaced network interface",
      "type": "object",
      "properties": {
        "id": {
          "description": "The cilium-agent-local ID of the endpoint",
          "type": "integer"
        },
        "status": {
          "description": "The current state and configuration of the endpoint, its policy \u0026 datapath, and subcomponents",
          "type": "object",
          "required": [
            "k1",
            "enabled"
          ],
          "properties": {
            "enabled": {
              "description": "enabled",
              "type": "boolean"
            },
            "k1": {
              "description": "key1",
              "type": "string"
            },
            "mode": {
              "description": "mode",
              "type": "string",
              "enum": [
                "none",
                "mode1",
                "mode2"
              ]
            }
          }
        }
      }
    },
    "ErrorRes": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "endpoint-change-request": {
      "name": "endpoint",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/EndpointChangeRequest"
      }
    },
    "endpoint-id": {
      "type": "string",
      "description": "String describing an endpoint\n",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "x-schemes": [
    "http"
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "http server",
    "title": "http server API",
    "version": "v1"
  },
  "basePath": "/v1",
  "paths": {
    "/endpoint/{id}": {
      "get": {
        "description": "Returns endpoint information implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Get endpoint by endpoint ID",
        "parameters": [
          {
            "type": "string",
            "description": "String describing an endpoint\n",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EndpointStatus"
            }
          },
          "400": {
            "description": "Invalid endpoint ID format for specified type",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          }
        }
      },
      "put": {
        "description": "Creates a new endpoint implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Create endpoint",
        "parameters": [
          {
            "type": "string",
            "description": "String describing an endpoint\n",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "endpoint",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointChangeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid endpoint in request",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "409": {
            "description": "Endpoint already exists",
            "x-go-name": "Exists"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          },
          "500": {
            "description": "Endpoint creation failed",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Failed"
          }
        }
      },
      "delete": {
        "description": "Deletes the endpoint specified by the ID implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Delete endpoint",
        "parameters": [
          {
            "type": "string",
            "description": "String describing an endpoint\n",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "206": {
            "description": "Deleted with a number of errors encountered",
            "schema": {
              "type": "integer"
            },
            "x-go-name": "Errors"
          },
          "400": {
            "description": "Invalid endpoint ID format for specified type. Details in error\nmessage\n",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          }
        }
      },
      "patch": {
        "description": "Applies the endpoint change request to an existing endpoint implemented by controller pod\n",
        "tags": [
          "controller"
        ],
        "summary": "Modify existing endpoint",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "String describing an endpoint\n",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "endpoint",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid modify endpoint request",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "Endpoint does not exist"
          },
          "429": {
            "description": "Rate-limiting too many requests in the given time frame"
          },
          "500": {
            "description": "Endpoint update failed",
            "schema": {
              "$ref": "#/definitions/ErrorRes"
            },
            "x-go-name": "Failed"
          }
        }
      }
    },
    "/healthy/liveness": {
      "get": {
        "description": "pod liveness probe for agent and controller pod",
        "tags": [
          "healthy"
        ],
        "summary": "Liveness probe",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Failed"
          }
        }
      }
    },
    "/healthy/readiness": {
      "get": {
        "description": "pod readiness probe for agent and controller pod",
        "tags": [
          "healthy"
        ],
        "summary": "Readiness probe",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Failed"
          }
        }
      }
    },
    "/healthy/startup": {
      "get": {
        "description": "pod startup probe for agent and controller pod",
        "tags": [
          "healthy"
        ],
        "summary": "Startup probe",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Failed"
          }
        }
      }
    }
  },
  "definitions": {
    "EndpointChangeRequest": {
      "description": "Structure which contains the mutable elements of an Endpoint.\n",
      "type": "object",
      "required": [
        "id",
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "enabled",
          "type": "boolean"
        },
        "id": {
          "description": "Local endpoint ID",
          "type": "integer"
        }
      }
    },
    "EndpointStatus": {
      "description": "An endpoint is a namespaced network interface",
      "type": "object",
      "properties": {
        "id": {
          "description": "The cilium-agent-local ID of the endpoint",
          "type": "integer"
        },
        "status": {
          "description": "The current state and configuration of the endpoint, its policy \u0026 datapath, and subcomponents",
          "type": "object",
          "required": [
            "k1",
            "enabled"
          ],
          "properties": {
            "enabled": {
              "description": "enabled",
              "type": "boolean"
            },
            "k1": {
              "description": "key1",
              "type": "string"
            },
            "mode": {
              "description": "mode",
              "type": "string",
              "enum": [
                "none",
                "mode1",
                "mode2"
              ]
            }
          }
        }
      }
    },
    "EndpointStatusStatus": {
      "description": "The current state and configuration of the endpoint, its policy \u0026 datapath, and subcomponents",
      "type": "object",
      "required": [
        "k1",
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "enabled",
          "type": "boolean"
        },
        "k1": {
          "description": "key1",
          "type": "string"
        },
        "mode": {
          "description": "mode",
          "type": "string",
          "enum": [
            "none",
            "mode1",
            "mode2"
          ]
        }
      }
    },
    "ErrorRes": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "endpoint-change-request": {
      "name": "endpoint",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/EndpointChangeRequest"
      }
    },
    "endpoint-id": {
      "type": "string",
      "description": "String describing an endpoint\n",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "x-schemes": [
    "http"
  ]
}`))
}
