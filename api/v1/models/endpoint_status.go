// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndpointStatus An endpoint is a namespaced network interface
//
// swagger:model EndpointStatus
type EndpointStatus struct {

	// The cilium-agent-local ID of the endpoint
	ID int64 `json:"id,omitempty"`

	// status
	Status *EndpointStatusStatus `json:"status,omitempty"`
}

// Validate validates this endpoint status
func (m *EndpointStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this endpoint status based on the context it is used
func (m *EndpointStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointStatus) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointStatus) UnmarshalBinary(b []byte) error {
	var res EndpointStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EndpointStatusStatus The current state and configuration of the endpoint, its policy & datapath, and subcomponents
//
// swagger:model EndpointStatusStatus
type EndpointStatusStatus struct {

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// key1
	// Required: true
	K1 *string `json:"k1"`

	// mode
	// Enum: [none mode1 mode2]
	Mode string `json:"mode,omitempty"`
}

// Validate validates this endpoint status status
func (m *EndpointStatusStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointStatusStatus) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *EndpointStatusStatus) validateK1(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"k1", "body", m.K1); err != nil {
		return err
	}

	return nil
}

var endpointStatusStatusTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","mode1","mode2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointStatusStatusTypeModePropEnum = append(endpointStatusStatusTypeModePropEnum, v)
	}
}

const (

	// EndpointStatusStatusModeNone captures enum value "none"
	EndpointStatusStatusModeNone string = "none"

	// EndpointStatusStatusModeMode1 captures enum value "mode1"
	EndpointStatusStatusModeMode1 string = "mode1"

	// EndpointStatusStatusModeMode2 captures enum value "mode2"
	EndpointStatusStatusModeMode2 string = "mode2"
)

// prop value enum
func (m *EndpointStatusStatus) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, endpointStatusStatusTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EndpointStatusStatus) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("status"+"."+"mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this endpoint status status based on context it is used
func (m *EndpointStatusStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EndpointStatusStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointStatusStatus) UnmarshalBinary(b []byte) error {
	var res EndpointStatusStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
