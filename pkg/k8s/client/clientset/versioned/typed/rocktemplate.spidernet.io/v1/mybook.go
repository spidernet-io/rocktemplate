// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/spidernet-io/rocktemplate/pkg/k8s/apis/rocktemplate.spidernet.io/v1"
	scheme "github.com/spidernet-io/rocktemplate/pkg/k8s/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// MybooksGetter has a method to return a MybookInterface.
// A group's client should implement this interface.
type MybooksGetter interface {
	Mybooks() MybookInterface
}

// MybookInterface has methods to work with Mybook resources.
type MybookInterface interface {
	Create(ctx context.Context, mybook *v1.Mybook, opts metav1.CreateOptions) (*v1.Mybook, error)
	Update(ctx context.Context, mybook *v1.Mybook, opts metav1.UpdateOptions) (*v1.Mybook, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, mybook *v1.Mybook, opts metav1.UpdateOptions) (*v1.Mybook, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Mybook, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.MybookList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Mybook, err error)
	MybookExpansion
}

// mybooks implements MybookInterface
type mybooks struct {
	*gentype.ClientWithList[*v1.Mybook, *v1.MybookList]
}

// newMybooks returns a Mybooks
func newMybooks(c *RocktemplateV1Client) *mybooks {
	return &mybooks{
		gentype.NewClientWithList[*v1.Mybook, *v1.MybookList](
			"mybooks",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.Mybook { return &v1.Mybook{} },
			func() *v1.MybookList { return &v1.MybookList{} }),
	}
}
